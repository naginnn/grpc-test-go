// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: outliers.proto

package GoPythonGrpcTest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutliersClient is the client API for Outliers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutliersClient interface {
	Detect(ctx context.Context, in *OutliersRequest, opts ...grpc.CallOption) (*OutliersResponse, error)
	Report(ctx context.Context, in *ReportType, opts ...grpc.CallOption) (*ReportB, error)
}

type outliersClient struct {
	cc grpc.ClientConnInterface
}

func NewOutliersClient(cc grpc.ClientConnInterface) OutliersClient {
	return &outliersClient{cc}
}

func (c *outliersClient) Detect(ctx context.Context, in *OutliersRequest, opts ...grpc.CallOption) (*OutliersResponse, error) {
	out := new(OutliersResponse)
	err := c.cc.Invoke(ctx, "/pb.Outliers/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outliersClient) Report(ctx context.Context, in *ReportType, opts ...grpc.CallOption) (*ReportB, error) {
	out := new(ReportB)
	err := c.cc.Invoke(ctx, "/pb.Outliers/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutliersServer is the server API for Outliers service.
// All implementations must embed UnimplementedOutliersServer
// for forward compatibility
type OutliersServer interface {
	Detect(context.Context, *OutliersRequest) (*OutliersResponse, error)
	Report(context.Context, *ReportType) (*ReportB, error)
	mustEmbedUnimplementedOutliersServer()
}

// UnimplementedOutliersServer must be embedded to have forward compatible implementations.
type UnimplementedOutliersServer struct {
}

func (UnimplementedOutliersServer) Detect(context.Context, *OutliersRequest) (*OutliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedOutliersServer) Report(context.Context, *ReportType) (*ReportB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedOutliersServer) mustEmbedUnimplementedOutliersServer() {}

// UnsafeOutliersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutliersServer will
// result in compilation errors.
type UnsafeOutliersServer interface {
	mustEmbedUnimplementedOutliersServer()
}

func RegisterOutliersServer(s grpc.ServiceRegistrar, srv OutliersServer) {
	s.RegisterService(&Outliers_ServiceDesc, srv)
}

func _Outliers_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutliersServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Outliers/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutliersServer).Detect(ctx, req.(*OutliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Outliers_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutliersServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Outliers/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutliersServer).Report(ctx, req.(*ReportType))
	}
	return interceptor(ctx, in, info, handler)
}

// Outliers_ServiceDesc is the grpc.ServiceDesc for Outliers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Outliers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Outliers",
	HandlerType: (*OutliersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Outliers_Detect_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Outliers_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outliers.proto",
}
